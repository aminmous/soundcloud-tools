import logging
from datetime import datetime

import devtools
from soundcloud_tools.client import Client
from soundcloud_tools.models.playlist import PlaylistCreate
from soundcloud_tools.models.request import PlaylistCreateRequest
from soundcloud_tools.models.stream import Stream, StreamItem, StreamItemType
from soundcloud_tools.utils import Weekday, get_scheduled_time, get_week_of_month

logger = logging.getLogger(__name__)


async def get_collections(
    client: Client, user_id: int, start: datetime, end: datetime, exclude_own: bool = True
) -> list[StreamItem]:
    limit, offset = 100, 0
    user_urn = f"soundcloud:users:{user_id}"
    all_reposts = []
    while True:
        response: Stream = await client.get_stream(user_urn=user_urn, offset=offset)
        reposts = [
            c
            for c in response.collection
            if start < c.created_at < end and (c.user.id != user_id if exclude_own else True)
        ]
        logger.info(f"Found {len(reposts)} valid reposts")
        all_reposts += reposts
        if not reposts:
            break
        offset += limit
    return all_reposts


def get_track_ids_from_collections(collections: list[StreamItem], types: list[StreamItemType]) -> set[int]:
    track_ids = set()
    for c in collections:
        if c.type not in types:
            continue
        if c.type.startswith("playlist"):
            track_ids |= {t.id for t in c.playlist.tracks}
        if c.type.startswith("track"):
            track_ids.add(c.track.id)
    return track_ids


async def get_tracks_ids_in_timespan(
    client: Client, user_id: int, start: datetime, end: datetime, types: list[StreamItemType]
):
    collections = await get_collections(client, user_id=user_id, start=start, end=end)
    track_ids = get_track_ids_from_collections(collections, types=types)
    logger.info(f"Found {len(track_ids)} tracks")
    return track_ids


async def create_weekly_favorite_playlist(client: Client, user_id: int, types: list[StreamItemType], week: int = 0):
    logger.info(f"Creating weekly favorite playlist for {week = } and {types = }")
    start = get_scheduled_time(Weekday.SUNDAY, weeks=week - 1)
    end = get_scheduled_time(Weekday.SUNDAY, weeks=week)
    month, week_of_month = start.strftime("%b"), get_week_of_month(start)

    track_ids = await get_tracks_ids_in_timespan(client, user_id=user_id, start=start, end=end, types=types)

    # Create playlist from track_ids
    playlist = PlaylistCreateRequest(
        playlist=PlaylistCreate(
            title=f"Weekly Favorites {month.upper()}/{week_of_month}",
            description=(
                f"Autogenerated set of liked and reposted tracks from my favorite artists.\n"
                f"Week {week_of_month} of {month} "
                f"({start.date()} - {end.date()}, CW {start.isocalendar().week})"
            ),
            tracks=list(track_ids),
            sharing="private",
            tag_list=f"soundcloud-archive,weekly-favorites,{month.upper()}/{week_of_month},CW{start.isocalendar().week}",
        )
    )
    request = devtools.pformat(playlist.model_dump(exclude={"playlist": {"tracks"}}))
    logger.info(f"Creating playlist {request} with {len(track_ids)} tracks")
    await client.post_playlist(data=playlist)
    return track_ids
